
CS 4V95.003, CS 5V81.012. Implementation of data structures and algorithms
Fall 2016
Optional Project 3
Thu, Sep 15, 2016

Version 1.0: Initial description.

Due: 11:59 PM, Sun, Sep 26.


1. Compare the performance of an O(n^2) sorting algorithm (say,
   Insertion sort) with Merge sort.  Implement the generics version of
   both algorithms.  You can create a sorted array (say,arr[i] = new Integer(i);")
   and then shuffle it randomly with "Shuffle.shuffle(arr);"
   Download link:  http://www.utdallas.edu/~rbk/teach/2016f/java/code/Shuffle.java
   Compare algorithms on array sizes that are powers of 2, starting at 2^10.
   For each algorithm, find array size at which the running time
   exceeds 15 sec.  Pseudocode for Insertion sort is available at:
   https://en.wikipedia.org/wiki/Insertion_sort

2. Compare the running times of the versions of merge sort discussed
   in class (using generics): (1) Merge sort as in Cormen et al's
   text book, creating new arrays L and R in merge.  Instead of using
   infinity as sentinels, use the conditions we developed in class to
   avoid accessing the array out of bounds.  (2) Use insertion sort
   for the base case when the size comes below a threshold.
   Experiment with different value of threshold.  (3) Pass array B for
   merge and avoid creating them each time merge is run.  (4) Use both
   improvements in (2) and (3) above.  (5) Use improvements (2) and
   (3), and in addition, avoid unnecessary copying (see class notes).
   Try array sizes that are powers of 2, starting with 2^20.

3. Compare the performance of Quicksort implementations: standard
   version of the Partition algorithm, versus Dual-Pivot partition.
   Try large inputs that contain many duplicate elements.
   Dual-Pivot Partition will be discussed in class on Tuesday.

4. Compare the running times of the following algorithms for computing
   Fibonacci numbers: (1) recursive, (2) O(n) dynamic program. (3)
   O(log n) DAC algorithm.  To avoid overflow, use Java library's
   BigInteger class: https://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html
   to store the numbers.  For each algorithm, find the largest value
   of n for which f(n) can be computed in less than 1 min.

